1. The ECMP simulator from repetita seems rather slow, below is a way that seems faster.
(note that since their ECMP simulator also does some other computations, these might be the cause, but an ECMP simulator
should not be hindered by computations that are not needed)
Assuming setting is available :

// Supposed faster way
Topology topology = setting.getTopology();
int nEdges = topology.nEdges;
Demands demands = setting.getDemands();

float[][][] edgeLoadPerPair = makeedgeLoadPerPair(topology);

float[] edgeLoads = new float[nEdges];
for (int i = 0; i < demands.nDemands; i++) {
    for (int j = 0; j < nEdges; j++) {
        edgeLoads[j] += edgeLoadPerPair[demands.dest[i]][demands.source[i]][j] * demands.amount[i];
    }
}

// Original slower way
ECMPFlowSimulator flowsim = new ECMPFlowSimulator();
flowsim.setup(setting);
flowsim.computeFlows();


2. When using floats, there can sometimes be rounding errors, which can give erroneous results when comparing two paths
with different edge loads to see if one is dominated by another.
See example below.
Problem of floating point precision e.g.
public class HelloWorld{

     public static void main(String []args){
        float a = 1.0f/3;
        float b = 1.0f/3;
        b = b/3;
        b = b/3;
        b = b+b+b+b+b+b+b+b+b;
        System.out.println(b);
        System.out.println(a==b);  // prints false because a=0.3333333334 and b=0.3333333337
     }
}
Currently a small amount is added to see a value when comparing to see if it is strictly smaller than another. A better option
would probably be to have rational values instead of floats.


3. The network topologies are (always ?) symmetric, paths A-B-C and C-B-A are therefore "equivalent" (excepted that the
opposite edges would have the load), yet both these paths are in the tree which is redundant.
Possible solutions
    - Consider only paths U-...-V where U<V
    - Combine edges (i,j) and (j,i) together which would also halve the amount of edges :)
        - By the way I can without changing the algorithm, halve the amount of edges by combining them without doing
        anything to the paths (to verify).


4. Some topologies have redundant edges (see for example Iris here https://editor.p5js.org/hugo.callebaut.sjb/sketches/WuKwacW3A
where nodes 10,21 and 22 on the left of the graph do not add anything to the graph since their only access is through node 29).
A preprocessing of the graph would in this case probably increase the performance of the algorithm.
(I think it was implemented in TOTEM and one of the thesis (Aubry or Hartert talked about it))
    - Beware that for the ILP, all paths should be given, and the original topology should be used since the "redundant"
    nodes might want to take another path to be routed to the first "non-redundant" node


5. If it happened that a x-SR could dominate y-SR path (y<x), then this would cause some disruption in the tree.


6. On large networks I run out of heap space, I should probably not store the edge loads in each SegmentTreeLeaf, but
rather recompute them from every node segment pair and then only store the precomputed edge load for each OD pair
which would imply a N*N*E (*4 because I use floats) bytes of memory used.


7. The ILP program using the computed non dominated paths is still not implemented, which makes the demand file useless.
Yet it is still mandatory to provide a demand file as I did not change too much of the Main method.


8. I don't think adding the demands to the algorithm is really useful. For example on the largest graph, there are 314 nodes,
this implies a possible 314Â²-314 OD pairs for demands (=98282), and there are in fact 96057 demands in the demands file,
which is almost every demand.


9. Some paths use extremely long detours, we might add a threshold with respect to total utilisation that might not
exceed a certain amount * OSPF(total utilisation). Although this would not be an exact method anymore.
For example on graph https://editor.p5js.org/hugo.callebaut.sjb/sketches/WuKwacW3A to go from node 1 to 0, the SR-path
1-23-0 exists which is very unlikely to ever appear in a good solution as the detour is immense.


10. Multithreading could probably be implemented without too much hassle and could make the algorithm go faster.

11. Comparison between different EdgeLoads objects -> https://www.overleaf.com/read/crqfdzxcdrxt

12. Could maybe try to use "non-hollow" datastructures for the children of a leaf, BUT no O(1) accesses anymore to a child :/

13. Could make SegmentTreeRoot a singleton ? Or at least make a static getter such as not to have it stored in EVERY leaf

14. Instead of "creating a new SR-path" and testing if it is dominated by any previous path, we could take a previous
path and test if it will dominate any path that we could add at this iteration.

15. https://dzone.com/articles/java-how-much-memory-do Memory in Java